import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { ChangeEvent, FormEvent, useState } from "react";
import { useQueryClient } from "react-query";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const queryClient = useQueryClient();
  const { data: cat } = trpc.useQuery(["cat.random"], {
    refetchInterval: 5000,
  });

  const mutation = trpc.useMutation(["cat.create"], {
    onSuccess: (data) => {
      queryClient.setQueryData(["cat.random"], data);
    },
  });

  const handleSubmit = (event: FormEvent): void => {
    event.preventDefault();
    mutation.mutate({ imageUrl });
    setImageUrl("");
  };

  const [imageUrl, setImageUrl] = useState<string>("");

  return (
    <div style={{ display: "grid", placeItems: "center" }}>
      <Head>
        <title>T3 Cats</title>
        <meta name="T3 cats" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <h1 style={{ textAlign: "center" }}>
          Create <span>T3</span> App
        </h1>

        <section>
          <div>
            {cat ? (
              <Image
                src={cat.imageUrl}
                alt={`random cat ${cat.id}`}
                layout={"fixed"}
                width={300}
                height={300}
              />
            ) : (
              <p>Loading...</p>
            )}
          </div>
        </section>
      </div>

      <section style={{ marginTop: "1em" }}>
        <form action="POST">
          <label>
            Image URL:
            <input
              name="imageUrl"
              type="text"
              value={imageUrl}
              onChange={(event: ChangeEvent<HTMLInputElement>) =>
                setImageUrl(event.target.value)
              }
            />
          </label>
          <>
            {mutation.isLoading ? (
              "Adding cat image..."
            ) : (
              <>
                {mutation.isError ? (
                  <div>An error occurred: {mutation.error.message}</div>
                ) : null}
                <button
                  disabled={mutation.isLoading}
                  type="submit"
                  onClick={handleSubmit}
                >
                  Save
                </button>
              </>
            )}
          </>
        </form>
      </section>
    </div>
  );
};

export default Home;
